TITLE:: ParamEnvSpec
summary:: Specify that a SynthDef parameter is an Env
categories:: Spec

DESCRIPTION::
This spec is very useful because Env parameters are treated as Arrays on Server and when you get it back, you must know the array represent an Env. By adding the spec to every SynthDef parameter that expect an Env, you can build GUI that automatically display a link::Classes/FixedEnvelopeView:: for it.

code::
ParamEnvSpec(\freq).map(Env([0,1,0],[0.1,0.3])); // --> Env([ 20.0, 20000.0, 20.0  ], [ 0.1, 0.3  ])
::

There are various way to create a ParamEnvSpec, to provide more or less details on the parameter. The size can be guessed by Param by looking at the SynthDef description

code::
ParamEnvSpec(); // undefined size and range but we know it's an Env parameter
ParamEnvSpec(\freq); // undefined size but the range is from \freq.asSpec
ParamEnvSpec(\freq!4); // this is a 4 levels values (thus 3 times values) Env with \freq.asSpec range
ParamEnvSpec(\freq,\unipolar); // undefined size, levels use \freq.asSpec range and time use \unipolor range
ParamEnvSpec(\freq!4,\unipolar); // same, with 4 levels values and 3 times values
::


CLASSMETHODS::

METHOD:: new
Create a new ParamEnvSpec

ARGUMENT:: levels
An array of spec for each level of the Env. If instead of an array you provide a single spec, it will be used for every level of the env.

ARGUMENT:: times
An array of spec for each time of the Env. If instead of an array you provide a single spec, it will be used for every time of the env.

ARGUMENT:: curves
An array of spec for each curve of the Env. If instead of an array you provide a single spec, it will be used for every curve of the env.

ARGUMENT:: default
The default value used to initialise the control with this spec assigned

returns:: a ParamEnvSpec


METHOD:: triangle
Create a new ParamEnvSpec in the shape of Env.triangle

ARGUMENT:: dur
The dur spec

ARGUMENT:: level
The level spec

returns:: a ParamEnvSpec


METHOD:: sine
Create a new ParamEnvSpec in the shape of Env.sine

returns:: a ParamEnvSpec



METHOD:: cutoff
Create a new ParamEnvSpec in the shape of Env.cutoff

returns:: a ParamEnvSpec


METHOD:: adsr
Create a new ParamEnvSpec in the shape of Env.adsr

ARGUMENT:: attackTime
The spec for attackTime

ARGUMENT:: decayTime
The spec for decayTime

ARGUMENT:: sustainLevel
The spec for sustainLevel

ARGUMENT:: releaseTime
The spec for releaseTime

ARGUMENT:: peakLevel
The spec for peakLevel

returns:: a ParamEnvSpec


METHOD:: dadsr
Create a new ParamEnvSpec in the shape of Env.dadsr

ARGUMENT:: delayTime
The spec for delayTime

ARGUMENT:: attackTime
The spec for attackTime

ARGUMENT:: decayTime
The spec for decayTime

ARGUMENT:: sustainLevel
The spec for sustainLevel

ARGUMENT:: releaseTime
The spec for releaseTime

ARGUMENT:: peakLevel
The spec for peakLevel

returns:: a ParamEnvSpec


METHOD:: perc
Create a new ParamEnvSpec in the shape of Env.perc

ARGUMENT:: attackTime
The spec for attackTime

ARGUMENT:: releaseTime
The spec for releaseTime

ARGUMENT:: level
The spec for level

returns:: a ParamEnvSpec

METHOD:: asr
Create a new ParamEnvSpec in the shape of Env.perc

ARGUMENT:: attackTime
The spec for attackTime

ARGUMENT:: sustainLevel
The spec for sustainLevel

ARGUMENT:: releaseTime
The spec for releaseTime

returns:: a ParamEnvSpec

METHOD:: linen
Create a new ParamEnvSpec in the shape of Env.linen

ARGUMENT:: attackTime
The spec for attackTime

ARGUMENT:: sustainLevel
The spec for sustainLevel

ARGUMENT:: releaseTime
The spec for releaseTime

ARGUMENT:: level
The spec for level

ARGUMENT:: curve
The spec for curve

returns:: a ParamEnvSpec


INSTANCEMETHODS::

METHOD:: map
provide a normalized Env (all values between 0 and 1) and get an Env matching this spec.

ARGUMENT:: val
the normalized Env

ARGUMENT:: ignoreCurves
do not map curves if true (default is true)

returns:: an Env


METHOD:: unmap
provide an Env and get a normalized Env using this spec to convert.

ARGUMENT:: val
the input Env

ARGUMENT:: ignoreCurves
do not unmap curves if true (default is true)

returns:: an Env


METHOD:: isDynamic
If you provide a single value instead of an Array in code::levels:: argument,
the spec is said to be dynamic.

returns:: a Boolean

METHOD:: size
return the size of the env described by this spec. This is the size of the
code::levels:: array. Note that size of code::times:: array is always one less
than size of code::levels:: array.

returns:: an Integer

METHOD:: levels
Get or set the code::levels:: array

returns:: an Array of specs


METHOD:: default
Get or set the default value for this spec

returns:: an Env

METHOD:: times
Get or set the code::times:: array

returns:: an Array of specs

METHOD:: curves
Get or set the code::curves:: array

returns:: an Array of specs


EXAMPLES::

code::

(
SynthDef(\sawadsr, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200,  doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = LFSaw.ar(freq * [1.01,1,0.99]);
	sig = RLPF.ar(sig, \lpfr.kr(1.1) * freq, \rq.kr(0.5));
	sig = sig * EnvGen.ar(\myenv.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);

// see argument envadsr is not recognized properly, it is treated as an Array
Pbindef(\test, \instrument,Â \sawadsr).edit; 
Pdef(\testspec, Pbind(\instrument, \sawadsr)).edit;
Ndef(\testndef, \sawadsr).asParamGroup.edit;
Param(Pdef(\testspec), \myenv).type; // the recognized type is \array, should be \env
Param(Pdef(\testspec), \myenv).spec; // a ParamArraySpec

// there is several ways to define the spec of \myenv

// you can specify the env directly in Param
Param(Pdef(\testspec), \myenv, ParamEnvSpec.adsr).edit;

// you can add it with JitLib .addSpec
Pdef(\testspec).addSpec(\myenv, ParamEnvSpec.adsr);
Pdef(\testspec).edit; // now it is recognized as an Env

// you can add it to global specs
Spec.add(\myenv, ParamEnvSpec.adsr)

// you can define it in the synthdef
(
SynthDef(\sawadsr, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200,  doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = LFSaw.ar(freq * [1.01,1,0.99]);
	sig = RLPF.ar(sig, \lpfr.kr(1.1) * freq, \rq.kr(0.5));
	sig = sig * EnvGen.ar(\myenv.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}, metadata:(specs:(
	myenv: ParamEnvSpec.adsr,
))).add;
);
::

