TITLE:: BusDef
summary:: Create named busses
categories:: Bus
related:: Classes/BufDef, Classes/WavetableDef, Classes/GroupDef, Classes/Param

DESCRIPTION::
BusDef solve two problems:
LIST::
## Prevent allocating two busses in the same variable
## Prevent using a bus when it's not allocated yet
::

code::
// instead of
b = Bus.control(s,1);
// write:
BusDef(\mybus, \control, 1)
::

You can then use BusDef(\mybus) everywhere a bus is expected. You can also write BusDef(\mybus, \control, 1) everywhere, so if the bus is not yet defined, it will be created the first time it is encountered.


CLASSMETHODS::

METHOD:: new
Create or retrieve a BusDef

ARGUMENT:: name
A symbol identifier for the BusDef

ARGUMENT:: rate
Choose code::\control:: or code::\audio:: rate for the bus.

ARGUMENT:: channels
Number of channel of the bus

returns:: a BusDef

METHOD:: audio
Same as code::BusDef(name, \audio)::

ARGUMENT:: server
Optional server, else Server.default is used.

ARGUMENT:: numChannels
Optional number of channels, else control busses have one channel and audio busses two.

returns:: a BusDef


METHOD:: control
Same as code::BusDef(name, \control)::

ARGUMENT:: server
Optional server, else Server.default is used.

ARGUMENT:: numChannels
Optional number of channels, else control busses have one channel and audio busses two.

returns:: a BusDef


METHOD:: newFromIndex
Do not allocate a bus and use an already existing bus index instead.

ARGUMENT:: rate
Choose code::\control:: or code::\audio:: rate for the bus

ARGUMENT:: idx
The index of the existing bus

ARGUMENT:: numchan
Number of channel of the bus

returns:: a BusDef

METHOD:: all
A dictionnary containing all BusDef

returns:: a PresetDictionary

METHOD:: freeAll
Free all BusDef


METHOD:: free
Free the bus

ARGUMENT:: name
the symbol identifier of the bus to free





INSTANCEMETHODS::

METHOD:: key
The symbol identifier of the BusDef
(describe method here)

returns:: a Symbol


EXAMPLES::

code::
// control example
(
SynthDef(\modulator, { arg out=0, gate=1, freq=1, modScale=1, modBias=0.5;
	var sig;
	sig = SinOsc.kr(freq).unipolar * modScale + modBias;
	sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
	Out.kr(out, sig);
}).add;
);
(
Pdef(\demo, 
	Ppar([
		Pbind(
			\instrument, \modulator,
			\freq, Pseq([1,8],inf),
			\out, BusDef(\mycontrolbus, \control), // you can define and use at the same time
			\dur, 1,
		),
		Pbind(
			\instrument, \saw,
			\degree, Pseq((1..20),inf) % Pseq((3..15),inf),
			\lpfr, BusDef(\mycontrolbus, \control).asMap, // map bus to lpfr
			\dur, 1/4,
			\amp, 0.1,
		)
	]),
).play;
);

BusDef(\mycontrolbus).set(1); // once defined, no need to specify the rate
BusDef(\mycontrolbus).set(2); // note: you need to stop the modulator to ear the result of set
::
