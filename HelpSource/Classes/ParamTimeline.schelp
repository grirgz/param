TITLE:: ParamTimeline
summary:: Automation curve for a Param
categories:: GUI, Timeline
related:: Classes/Param, Classes/NoteTimeline, Classes/ClipTimeline

DESCRIPTION::
ParamTimeline allow you to use a curve to automate a link::Classes/Param::

SECTION:: Graphical interfaces:

SUBSECTION::Top bar

table::
    ## Play Button || Play the preview loop or the clip loop if there is no preview loop defined. Infinite repeat by default (use quant)
    ## Stop button || Stop playing and erase the preview loop markers (with quant)
    ## Play Target Button || If the target of the controlled Param is a Pdef or Ndef, you can play/stop it with this button
    ## Label || Name of the controlled Param property
	## Value Knob || This knob is linked to the contolled param, you can use it for recording.
    ## Bus mode button || the Param should be in bus mode, you can ignore this button
    ## Repeat Number box || The number of time the timeline will be looped before stopping
    ## Grid quant menu || quantize selection, new notes, moving notes
    ## History buttons || Undo and redo changes in the timeline
    ## Rec button || Start/stop recording. 
    ## Metronome button || Start/stop metronome. 
    ## Menu ... button || See below.
::

SUBSECTION::Menu ...

table::
    ## Edit Param || Open the property window of the controlled Param
    ## Select Param || Choose another Param to be controlled by the timeline
    ## Save as / Save || Open a dialog to select a file in which save the timeline. If a file was already selected, the button is called "Save" and directly save to the previous file.
    ## Copy refString to clipboard || Put in clipboard a compile string containing the timeline object so you can easily use it in your code
::

SUBSECTION::Mode button

At the top left of the window.

table::
    ## Move mode (finger icon) || Move node by dragging them, draw selection
rectangle, create nodes by holding Ctrl, change curve by holding shift and
dragging
    ## Write Mode (pen icon) || Clicking on empty space will create a node
    ## Eraser Mode (square icon) || Clicking on a node will erase it
::

SUBSECTION::Zoom buttons

At the top right of the window there is Vertical and horizontal arrow buttons.  They allow to set the vertical and horizontal zoom such as all nodes are visible.

< and > buttons at the bottom right are used to grow or shrink the viewport of the timeline. Use it when you have no more room for writing your melody. Note that even if notes are not visible in the viewport, they are still present and played.


SECTION:: Keyboard shortcuts

On the time ruler:
table::
    ## Define start of the preview loop || Left click
    ## Define end of the preview loop || Right click
    ## Add a marker || Ctrl + left click
    ## Edit marker name || Double click on marker. Hit Enter to save the new name
    ## Delete a marker || Delete
::


On the main panel:
table::
    ## Add a node || Ctrl + Left click
    ## Change curve shape || Shift + Left click, hold mouse button to adjust the curve shape under the cursor
    ## Select a note || Click on the note to select it
    ## Select several note || Click somewhere with no note and drag to form a selection rectangle
    ## Play immediatly the selected part of the timeline (set preview loop) || Space
	## Zoom in/out horizontally || Hold ctrl and use mouse wheel
	## Zoom in/out vertically || Hold shift and use mouse wheel
    ## Delete selected node(s) || use Delete key
    ## Define the end of the clip || Ctrl + Right click
    ## Copy selected notes || Ctrl + c
    ## Paste selected notes || Ctrl + v (click first where you want to paste)
    ## Double the clip by repeating notes || Ctrl + d
    ## Add a snapshot to undo history || Ctrl + k
    ## Create a new empty score || Ctrl + n
    ## Quantize selected notes || q
    ## Move up or down selected notes by track number || Up or Down arrow keys
    ## Move left or right selected notes by grid quant || Left or Right arrow keys
    ## Move left or right selected notes by grid quant * 8 || Ctrl + Left or Ctrl + Right arrow keys
::

CLASSMETHODS::

METHOD:: new
Create or retrieve an instance of ParamTimeline. If baseObject is provided, it is
updated in the instance

code::
ParamTimeline(\test, Param(Pdef(\bass), \ffreq)).edit; // create the \test instance and edit it
::

ARGUMENT:: name
the key under which the object which be stored

ARGUMENT:: baseObject
A link::Classes/Param:: which will be controlled by the timeline.

returns:: a ParamTimeline


INSTANCEMETHODS::

METHOD:: play
Play the timeline

METHOD:: stop
Stop the timeline

METHOD:: isPlaying
Return weither the timeline is playing.
Set it to play/stop the timeline pattern
ARGUMENT:: val
true to start, false to stop

METHOD:: edit
Show the graphical editor

METHOD:: eventList
Return the current event list of the timeline
returns:: a link::Classes/TimelineEventList::

METHOD:: startRecording
Start the recording

METHOD:: stopRecording
Stop the recording

METHOD:: isRecording
Return weither the timeline is recording.
Set it to start/stop the recording.
ARGUMENT:: val
true to start, false to stop
returns:: a Bool

METHOD:: asPattern
Return the timeline pattern for embeding in other patterns
ARGUMENT:: startOffset
Start startOffset beats after the start event
FIXME: broken
ARGUMENT:: dur
Cut the length of the pattern to dur
ARGUMENT:: repeatCount
repeat the pattern repeatCount times
returns:: a Prout

METHOD:: asPatternAbs
Same as asPattern but use absolute time instead
ARGUMENT:: startBeat
Start the loop at startBeat
ARGUMENT:: endBeat
End the loop at endBeat
ARGUMENT:: repeatCount
repeat the pattern repeatCount times
returns:: a Prout

METHOD:: asPatternSlices
Slices are delimited by markers (\start, \end, and custom markers). Return every slices of the clip loop
returns:: an array of Prout

METHOD:: asPatternSlice
Slices are delimited by markers.
Return a specific slice from marker startMarker and endMarker.
A marker can be \start, \end, or a String containing the label of the custom marker
ARGUMENT:: startMarker
ARGUMENT:: endMarker
ARGUMENT:: repeatCount
repeat the pattern repeatCount times
returns:: a Prout

METHOD:: presetCompileString
Return a preset string so you can save the state of the timeline on disk. To load the timeline again, just interpret the string, it's human readable code.

METHOD:: outBus
Get or set the out bus of the pattern. Only meaningful if the target of the controlled Param is a bus.

METHOD:: label
Get or set the label of the timeline (default to key)

METHOD:: key
The key to identify the timeline (first argument at creation)

METHOD:: quant
Get or set the quant of the pattern player (EventPatternProxy). Do not confuse it with the grid quant

EXAMPLES::

code::
(
SynthDef(\saw, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200,  doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = LFSaw.ar(freq * [1.01,1,0.99]);
	sig = RLPF.ar(sig, \lpfr.kr(1.1) * freq, \rq.kr(0.5));
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}, metadata:(specs:(
	lpfr: ControlSpec(0.1,10,\lin, 0, 1) // define spec in synthdef so we don't have to specify it in Param
))).add;
);

// define a base pattern that will be controlled
(
Pdef(\bass, 
	Pbind(
		\instrument, \saw,
		\degree, Pseq([0,7,2,3],inf),
		\octave, 3,
		\dur, 1/8,
		\amp, 0.1,
	)
).play;
);

// now you can create the curve (hold Ctrl key and click or use write mode)
// holding shift and draging allow you to change curve
// you can also record it, a knob allow you to control the value
ParamTimeline(\test, Param(Pdef(\bass), \lpfr)).edit;

(
// create a pattern with both the bass pattern and the automation pattern
Pdef(\main, 
	Ppar([
		Pdef(\bass),
		ParamTimeline(\test).asPattern,
	])
).play;
)


////////// control a Ndef with ParamTimeline

(
Ndef(\sound, { 
	var sig; 
	sig = LFSaw.ar(LFNoise1.kr(1!2) * 20 + 200) * 0.1;
	sig = RLPF.ar(sig, \lpf.kr(100), \rq.kr(0.5));
}).play
)

ParamTimeline(\testndef, Param(Ndef(\sound),Â \lpf, \freq)).edit; // third argument of Param is the spec
::

