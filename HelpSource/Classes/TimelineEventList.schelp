TITLE:: TimelineEventList
summary:: Data model for timelines
categories:: Timeline
related:: Classes/Param, Classes/NoteTimeline

DESCRIPTION::
Timeline data is stored as a list of event.


CLASSMETHODS::

METHOD:: new
Create a new TimelineEventList

METHOD:: newFrom
Create a new TimelineEventList from a pattern or a list of event

ARGUMENT:: pat
An link::Classes/EventPattern:: or a list of link::Classes/Event::

ARGUMENT:: size
Max size for the pattern, to avoid infinite loop when the pattern is infinite

ARGUMENT:: inval
the event passed as input to the pattern (default: code::Event.default::)

returns:: a TimelineEventList


INSTANCEMETHODS::

METHOD:: startTime
Get or set the time of the start event

ARGUMENT:: time
Absolute time in beats

METHOD:: endTime
Get or set the absolute time of the end event

ARGUMENT:: time
Absolute time in beats


METHOD:: setStartPosition
Same as link::#-startTime::

METHOD:: setEndPosition
Same as link::#-endTime::

METHOD:: add
Add an event to the TimelineEventList.
Don't forget to call link::#-reorder:: when you have finished to update relative
duration between events.

ARGUMENT:: ev
The event to add, only code::\absTime:: key is required


METHOD:: addEvent
Add an event to the TimelineEventList. Add the start event if list is
empty. Also recompute duration of previous event
and send a refresh message on the TimelineEventList.

ARGUMENT:: ev
The event to add, only code::\absTime:: key is required


METHOD:: reorder
Sort the events by code::\absTime::. 
Update link::#-startTime::, link::#-endTime:: and link::#-totalDur:: variables. 
Call link::#-calcRelDurs::.




METHOD:: double
Append a copy of itself at the end of the EventList, doubling it.


METHOD:: calcRelDurs
When you add events, call this method to compute code::relDur::, code::playDur:: and code::dur:: keys automatically for you

returns:: this

METHOD:: hasContent
Return False if the only event in the list are start end end events
returns:: a Boolean



METHOD:: splitEvent
Split an event into two events at durFromEventStart

ARGUMENT:: event
The event to split

ARGUMENT:: durFromEventStart
At which time in beat from start of event to split

returns:: The new Event. If durFromEventStart is outside of event, return
original event.

METHOD:: embedInStream
Embed the event list as a pattern

ARGUMENT:: in
Optional input event


METHOD:: setRelDurInPrev
Recompute the code::\relDur:: of previous event.

ARGUMENT:: newEvent
this event was just added, it will be used to find the previous event

ARGUMENT:: newIndex
you can provide the index of the new event, else it will take the
indexOf(newEvent)


METHOD:: relStartTime
start time in beats relative to the time of first event

returns:: a Float

METHOD:: asPattern
Return a pattern playing the event list

ARGUMENT:: in
Optional input value

returns:: a Pattern

METHOD:: removeEvent
Remove event by calling link::#-remove:: and eventually refresh
(describe method here)

ARGUMENT:: event
The event to remove

ARGUMENT:: refresh
call link::#-calcRelDurs:: and send code::\refresh:: changed message if true.

METHOD:: finish
Add the end event

ARGUMENT:: absTime
Absolute time of the end event in beats



METHOD:: clone
Return a copy of the event list. This create a copy of each event, but objects
stored on event keys stay shared.

returns:: a TimelineEventList

METHOD:: start
Create the start event. This allow to start playing in the middle of the timeline

ARGUMENT:: absTime
optional time (default: 0)

returns:: this

METHOD:: presetCompileString
Return a compile string of the TimelineEventList

returns:: a String

METHOD:: firstTime
Time of the first event in beats

returns:: a Float

METHOD:: totalDur
Total duration of the event list from start event to end event in beats

returns:: a Float

METHOD:: print
Pretty print the list

ARGUMENT:: keys
(describe argument here)

ARGUMENT:: postRest
(describe argument here)


METHOD:: extraData
Used by link::Classes/SampleTimeline:: to store buffer info

subsection:: Deprecated


METHOD:: setPlayDurs
Deprecated

METHOD:: playingDur
Deprecated

METHOD:: setPlayDursToRelDur
Deprecated

METHOD:: quantizeDurs
Deprecated

ARGUMENT:: quant
(describe argument here)

ARGUMENT:: fullDur
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: restoreDurs
Deprecated


EXAMPLES::

code::
// create a timeline with one midinote at time 2 then display it
~el = TimelineEventList.new
~el.start; // always need a start event
~el.add((absTime:2, midinote:100)); // only absTime is required
~el.finish(4); // finish at beat 4
NoteTimeline(\help).eventList = ~el; // assign the event list to a timeline
NoteTimeline(\help).edit;

// you can create it like a List
~el = TimelineEventList[ (absTime:2, midinote:100) ];
~el.start(1);
~el.finish(4); // this reorder the events and compute missing keys
::

